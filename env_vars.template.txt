# This file is used to set various secrets and configuration parameters
# Pass a completed version of this template to the Docker container upon
# startup with the --env-file arg.

###################### Database-related parameters ######################################

DB_NAME=
DB_USER=
DB_PASSWD=
PGPASSWORD=
POSTGRES_PASSWORD=

# Should we populate the database with dummy data (the same data we test with)?
# Enter "yes" (case-sensitive, without quotes) if so.  Otherwise, it will NOT populate the db
POPULATE_DB=

###################### END Database-related parameters ###################################

######################### Django-related parameters ######################################

# The secret key is used to encrypt data when making tokens, etc.
# Accordingly, make this appropriately long:
DJANGO_SECRET_KEY=

# A comma-delimited list of the hosts.  Add hosts as necessary
DJANGO_ALLOWED_HOSTS=127.0.0.1,localhost

# A comma-delimited list of the origins for cors requests
# Needed to hookup to front-end frameworks which may be 
# at a different domain.
DJANGO_CORS_ORIGINS=http://127.0.0.1

# For automatically creating an admin, supply the following:
# username is required, but the user model uses the email field 
# as the username.  Therefore, we auto-fill that based on the email
DJANGO_SUPERUSER_PASSWORD=
DJANGO_SUPERUSER_EMAIL=
DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_EMAIL

####################### END Django-related parameters ###################################

###################### Storage-related parameters ######################################

# "dotted" path to the class implementing the storage backend
# See the api/storage_backends/ folder for options
RESOURCE_STORAGE_BACKEND=api.storage_backends.local.LocalStorage

# If using local storage for all files (not recommended!), set the following:
# This is relative to the django BASE_DIR
LOCAL_USER_STORAGE_DIRNAME=user_resources

# If using GCP and bucket storage, set the following:
# DO NOT inlude the "gs://" prefix
GOOGLE_BUCKET_NAME=

###################### END Storage-related parameters ######################################

############################ Email-related parameters ######################################

# How to send email-- by default, we print emails to the console for dev
# If you would like to set another email backend (e.g. gmail), set this accordingly.
# See the docs and/or base_settings.py in the relevant section regarding email.
EMAIL_BACKEND_CHOICE=GMAIL

# When email is sent, this will give the "from" field.  e.g. "some name <some@email.com>" (without the quotes)
FROM_EMAIL=

# If using Gmail for your email service, specify the following:
# See docs for how to get these values.
GMAIL_ACCESS_TOKEN=
GMAIL_REFRESH_TOKEN=
GMAIL_CLIENT_ID=
GMAIL_CLIENT_SECRET=

########################## END Email-related parameters #####################################


############################ Social auth-related parameters ######################################

# a comma-delimited list giving the social auth providers to use.  Check the available
# implementations in mev/api/base_settings.py
SOCIAL_BACKENDS=GOOGLE

########################## END Social-auth-related parameters #####################################

############################ Sentry parameters ######################################

# After starting the sentry instance, tell it to configure for Django.  When you do 
# that, it will give a code snippet.  Note the "dsn" it provides, which is a URL
# that typically looks like http://<string>@<ip>:<port>/1
# Copy that url below (including the http/https prefix)
SENTRY_URL=

########################## END Sentry parameters #####################################