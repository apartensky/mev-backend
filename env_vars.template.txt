# This file is used to set various secrets and configuration parameters
# Pass a completed version of this template to the Docker container upon
# startup with the --env-file arg.


###################### Database-related parameters ######################################

DB_NAME=
DB_USER=
DB_PASSWD=
PGPASSWORD=
POSTGRES_PASSWORD=

# Should we populate the database with dummy data (the same data we test with)?
# Enter "yes" (case-sensitive, without quotes) if so.  Otherwise, it will NOT populate the db
POPULATE_DB=

###################### END Database-related parameters ###################################

######################### Django-related parameters ######################################

# The secret key is used to encrypt data when making tokens, etc.
# Accordingly, make this appropriately long:
DJANGO_SECRET_KEY=

# A comma-delimited list of the hosts.  Add hosts as necessary
DJANGO_ALLOWED_HOSTS=127.0.0.1,localhost

# A comma-delimited list of the origins for cors requests
# Needed to hookup to front-end frameworks which may be 
# at a different domain.
DJANGO_CORS_ORIGINS=http://127.0.0.1

# For automatically creating an admin, supply the following:
# username is required, but the user model uses the email field 
# as the username.  Therefore, we auto-fill that based on the email
DJANGO_SUPERUSER_PASSWORD=
DJANGO_SUPERUSER_EMAIL=
DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_EMAIL

####################### END Django-related parameters ###################################


###################### Start cloud env related parameters ###############################

# Here we setup some parameters relating to the cloud environment, including the location
# of remote job runner services, etc.

# The cloud platform determines which classes are used to hook up to 
# storage buckets, etc.
# Choose from: GOOGLE
CLOUD_PLATFORM=

# Will you be using one of the remote job runners?
# Case-sensitive "yes" (without quotes) will enable. Otherwise we will
# not enable remote job runs
ENABLE_REMOTE_JOB_RUNNERS=

# Which remote job runners will be used?
# Doesn't matter if the USE_REMOTE_JOB_RUNNERS is "false"
# This is a comma-delimited list of strings which have to match
# the recognized keys in the Django settings file(s).
REMOTE_JOB_RUNNERS=


###################### END cloud env related parameters #################################


###################### Storage-related parameters ######################################

# the storage backend dictates where the "absolute" source of the files is. Of course,
# to perform many operations we need to move files back and forth between local and
# cloud storage. However, only one location serves as the "ground truth", and this is
# the path that is reflected in the Resource database instances.
# Can be local, or the name of one of the cloud providers (which then allows us 
# to link up the appropriate storage class) 
# Note that if you are requesting to use remote job runners (ENABLE_REMOTE_JOB_RUNNERS)
# then you are REQUIRED to use bucket storage. You can only use local storage if all
# your runners are local.
# Options include "local" and "remote"
STORAGE_LOCATION=

# If using local storage for all files (not recommended!), set the following:
# This is relative to the django BASE_DIR
LOCAL_STORAGE_DIRNAME=resource_storage

# A bucket where MEV user's files will be stored (if using bucket storage). This
# is independent of any bucket's used as a storage location for remote job runners, etc.
# DO NOT inlude the prefix, e.g. "gs://" or "s3://"
STORAGE_BUCKET_NAME=

# The maximum size (in bytes) to allow "direct" downloads from the API.
# If the file exceeds this, we ask the user to download in another way. 
# Most files are small and this will be fine. However, we don't want users
# trying to download BAM or other large files. They can do that with other methods,
# like via Dropbox.
MAX_DOWNLOAD_SIZE_BYTES=5.12e8

###################### END Storage-related parameters ######################################

############################ Email-related parameters ######################################

# How to send email-- by default, we print emails to the console for dev
# If you would like to set another email backend (e.g. gmail), set this accordingly.
# See the docs and/or base_settings.py in the relevant section regarding email.
EMAIL_BACKEND_CHOICE=GMAIL

# When email is sent, this will give the "from" field.  e.g. "some name <some@email.com>" (without the quotes)
FROM_EMAIL=

# If using Gmail for your email service, specify the following:
# See docs for how to get these values.
GMAIL_ACCESS_TOKEN=
GMAIL_REFRESH_TOKEN=
GMAIL_CLIENT_ID=
GMAIL_CLIENT_SECRET=

########################## END Email-related parameters #####################################


############################ Social auth-related parameters ######################################

# a comma-delimited list giving the social auth providers to use.  Check the available
# implementations in mev/api/base_settings.py
SOCIAL_BACKENDS=GOOGLE

########################## END Social-auth-related parameters #####################################

############################ Sentry parameters ######################################

# After starting the sentry instance, tell it to configure for Django.  When you do 
# that, it will give a code snippet.  Note the "dsn" it provides, which is a URL
# that typically looks like http://<string>@<ip>:<port>/1
# Copy that url below (including the http/https prefix)
SENTRY_URL=

########################## END Sentry parameters #####################################


############################ Domain parameters ######################################

# The frontend can be located on a different server.
# This is used for communications, etc. (such as verification emails)
# which will direct the user to a link on the front-end
FRONTEND_DOMAIN=

# The domain of the API:
BACKEND_DOMAIN=

# This setting gives a "human readable" name to the site for contacts
# For instance, could be "WebMEV" or other so that emails will have a subject
# like "Registration details for WebMEV"
SITE_NAME=

########################## END Domain parameters #####################################

########################## Dockerhub parameters #########################################

DOCKERHUB_USERNAME=
DOCKERHUB_PASSWORD=

########################## END Dockerhub parameters #####################################


########################## Cromwell parameters #########################################
# Only need to fill-in variables here if you are using the remote Cromwell job engine
# This is only relevant if ENABLE_REMOTE_JOB_RUNNERS and REMOTE_JOB_RUNNERS
# are used

# If using the Cromwell engine to run remote jobs, we need to know the bucket where it will
# write files. If NOT using Cromwell, then this does not have to be filled.
# DO NOT inlude the prefix, e.g. "gs://" or "s3://"
CROMWELL_BUCKET=

# The address (including http/s protocol and any port) of the Cromwell server
# Only needed if using the remote Cromwell job engine.
CROMWELL_SERVER_URL= 

########################## END Cromwell parameters #########################################
