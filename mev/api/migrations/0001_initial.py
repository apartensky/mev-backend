# Generated by Django 3.0.7 on 2020-06-27 01:31

import api.models.user
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email address')),
                ('user_uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', api.models.user.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Workspace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('workspace_name', models.CharField(default='', max_length=100)),
                ('creation_datetime', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workspaces', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('owner', 'workspace_name')},
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('path', models.CharField(default='', max_length=255)),
                ('name', models.CharField(default='', max_length=255)),
                ('size', models.BigIntegerField(default=0)),
                ('resource_type', models.CharField(blank=True, choices=[('FQ', 'Fastq'), ('FA', 'Fasta'), ('ALN', 'Alignment (SAM/BAM)'), ('FT', 'Feature table'), ('MTX', 'Numeric table'), ('I_MTX', 'Integer table'), ('ANN', 'Annotation table'), ('BED', 'BED-format file')], max_length=5, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('status', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('creation_datetime', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workspace_resources', to='api.Workspace')),
            ],
        ),
        migrations.CreateModel(
            name='ExecutedOperation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('execution_start_datetime', models.DateTimeField(auto_now_add=True)),
                ('execution_stop_datetime', models.DateTimeField()),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Operation')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceMetadata',
            fields=[
                ('resource', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.Resource')),
                ('observation_set', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('feature_set', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('parent_operation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.ExecutedOperation')),
            ],
        ),
    ]
