#! /bin/bash

set -o allexport

# Fill in these environment variables and source them before starting Vagrant.
# The Vagrantfile will pass these to the provisioning script so that the Django
# application can see the proper configuration variables.
# Many of the environment variables for remote services, like bucket storage,
# Dockerhub, etc. are mocked out for unit tests. Hence, if you're using your 
# local dev to run unit tests, etc. that don't actually depend on those services,
# then many of the environment variables can be "dummy" values.

# dev or production status. Should be "dev" if developing locally
ENVIRONMENT="dev"

# Which branch from the repo should be used to build the app
BRANCH="deploy"

###################### Database-related parameters ######################################

# Postgres database params
DB_NAME=""
DB_USER=""
DB_PASSWD=""
ROOT_DB_PASSWD=""
DB_PORT="5432"

# Note that in production the db_host is given as <project>:<region>:<db name>
# For local dev, we have a postgres database on the same virtual machine
DB_HOST_FULL="localhost"

# Should we populate the database with dummy data (the same data we test with)?
# Enter "yes" (case-sensitive, without quotes) if so.  Otherwise, it will NOT populate the db
POPULATE_DB=yes

###################### END Database-related parameters ###################################


############################ Domain parameters ######################################

# If we wish to use this backend for our frontend, need to specify so that CORS works
FRONTEND_DOMAIN="mydomain.com"

# The domain of the API. Used for setting the django allowed hosts.
# For dev, can be simply localhost
BACKEND_DOMAIN="localhost"

# This setting gives a "human readable" name to the site for contacts
# For instance, could be "WebMEV" or other so that emails will have a subject
# like "Registration details for WebMEV"
SITE_NAME="WebMeV"

########################## END Domain parameters #####################################


######################### Django-related parameters ######################################


# The secret key is used to encrypt data when making tokens, etc.
# Accordingly, make this appropriately long:
DJANGO_SECRET_KEY=""

# A comma-delimited list of the hosts.  Add hosts as necessary
# e.g. 127.0.0.1,localhost,xx.xxx.xx.xx,mydomain.com
DJANGO_ALLOWED_HOSTS=127.0.0.1,localhost

# A comma-delimited list of the origins for cors requests
# Needed to hookup to front-end frameworks which may be 
# at a different domain. Include protocol and ports
# localhost:4200 permits a local angular application to connect
OTHER_CORS_ORIGINS="http://localhost:4200"

# For automatically creating an admin, supply the following:
# username is required, but the user model uses the email field 
# as the username.  Therefore, we auto-fill that based on the email
DJANGO_SUPERUSER_PASSWORD=""
DJANGO_SUPERUSER_EMAIL=""

# Don't change this:
# We use a different user model which relies on the email instead of a 
# username. However, still need to define this environment variable
# for Django's createsuperuser command to work
DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_EMAIL


####################### END Django-related parameters ###################################





####################### Redis-related parameters ###################################


# Where is redis listening?
# We assume that it is listening on the dfault port of 6379
REDIS_HOST=localhost


####################### END Redis-related parameters ###################################





###################### Start cloud env related parameters ###############################


# Here we setup some parameters relating to the cloud environment, including the location
# of remote job runner services, etc.

# The cloud platform determines which classes are used to hook up to 
# storage buckets, etc.
CLOUD_PLATFORM=GOOGLE

# Will you be using one of the remote job runners?
# Case-sensitive "yes" (without quotes) will enable. Otherwise we will
# not enable remote job runs
ENABLE_REMOTE_JOB_RUNNERS=no

# Which remote job runners will be used?
# This variable is not used if ENABLE_REMOTE_JOB_RUNNERS is "false"
# This is a comma-delimited list of strings which have to match
# the recognized keys (see AVAILABLE_REMOTE_JOB_RUNNERS in the
# Django settings file(s)).
REMOTE_JOB_RUNNERS=CROMWELL


###################### END cloud env related parameters #################################





###################### Storage-related parameters ######################################

# the path to a JSON file containing the credentials to authenticate with the Google storage API.
# The startup script will perform the authentication and place the credentials into this file.
# Note that this authentication can ONLY happen if we are on GCP and can use the VMs service
# account.
# For local dev that does not interact with a google bucket, that authentication doesn't
# happen and we simply "touch" this file.
STORAGE_CREDENTIALS="/opt/software/mev-backend/storage_credentials.json"

# the storage backend dictates where the "absolute" source of the files is. Of course,
# to perform many operations we need to move files back and forth between local and
# cloud storage. However, only one location serves as the "ground truth", and this is
# the path that is saved in the database (in the Resource table).
# Note that if you are requesting to use remote job runners (ENABLE_REMOTE_JOB_RUNNERS)
# then you are REQUIRED to use bucket storage. You can only use local storage if all
# your runners are local.
# Options include "local" and "remote"
STORAGE_LOCATION=remote

# If using local storage for all files (not recommended since sequencing files
# could consume large amount of disk space), set the following:
# This directory is relative to the django BASE_DIR
LOCAL_STORAGE_DIRNAME=user_resources

# A bucket where MEV user's files will be stored (if using bucket storage). This
# is independent of any buckets used as a storage location for remote job runners, etc.
# DO NOT inlude the prefix, e.g. "gs://" or "s3://".
# THIS BUCKET MUST ALREADY EXIST. 
# Note that for local dev, you can leave this blank if you are using local storage
STORAGE_BUCKET_NAME=""

# The maximum size (in bytes) to allow "direct" downloads from the API.
# If the file exceeds this, we ask the user to download in another way. 
# Most files are small and this will be fine. However, we don't want users
# trying to download BAM or other large files. They can do that with other methods,
# like via Dropbox.
MAX_DOWNLOAD_SIZE_BYTES=5.12e8

# For signing download URLs we need a credentials file. To create that, we need a
# service account with appropriate privileges. This variable is the full name of that
# service account file (e.g. <id>@project.iam.gserviceaccount.com)
SERVICE_ACCOUNT=""

###################### END Storage-related parameters ######################################

############################ Email-related parameters ######################################

# How to send email-- by default, we print emails to the console for dev
# If you would like to set another email backend (e.g. gmail), set this accordingly.
# See the docs and/or base_settings.py in the relevant section regarding email.
EMAIL_BACKEND_CHOICE="GMAIL"

# When email is sent, this will give the "from" field.  e.g. "some name <some@email.com>" (without the quotes)
FROM_EMAIL=""

# If using Gmail for your email service, specify the following:
# See docs for how to get these values.
GMAIL_ACCESS_TOKEN=""
GMAIL_REFRESH_TOKEN=""
GMAIL_CLIENT_ID=""
GMAIL_CLIENT_SECRET=""


########################## END Email-related parameters #####################################




############################ Social auth-related parameters ######################################

# a comma-delimited list giving the social auth providers to use.  Check the available
# implementations in mev/api/base_settings.py
SOCIAL_BACKENDS=GOOGLE

########################## END Social-auth-related parameters #####################################


############################ Sentry parameters ######################################

# After starting the sentry instance, tell it to configure for Django.  When you do 
# that, it will give a code snippet.  Note the "dsn" it provides, which is a URL
# that typically looks like http://<string>@<ip>:<port>/1
# Copy that url below (including the http/https prefix)
SENTRY_URL=""

########################## END Sentry parameters #####################################





############################ Dockerhub related parameters ######################################

# To push to the Dockerhub repository, we need to authenticate with `docker login`...
# These credentials are used for that.
# In local dev, all those operations are mocked out, so these fields really don't matter
DOCKERHUB_USERNAME=""
DOCKERHUB_PASSWORD=""
DOCKERHUB_ORG=""

############################ END Dockerhub related parameters ######################################


########################## Cromwell parameters #########################################
# Only need to fill-in variables here if you are using the remote Cromwell job engine
# This is only relevant if ENABLE_REMOTE_JOB_RUNNERS and REMOTE_JOB_RUNNERS
# are used

# If using the Cromwell engine to run remote jobs, we need to know the bucket where it will
# write files. If NOT using Cromwell, then this does not have to be filled.
# DO NOT inlude the prefix, e.g. "gs://" or "s3://"
CROMWELL_BUCKET=""

# The address (including http/s protocol and any port) of the Cromwell server
# Only needed if using the remote Cromwell job engine.
# Should be the INTERNAL IP address in the same vpc network
CROMWELL_IP=""
CROMWELL_SERVER_URL=http://$CROMWELL_IP:8000

########################## END Cromwell parameters #########################################


set +o allexport

